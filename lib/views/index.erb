<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf_token" content="<%= env['rack.session'][:csrf] %>">
    <title>
      frampt - gnot.club
    </title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css">
    <script type="module">
      import { Application, Controller } from "https://unpkg.com/@hotwired/stimulus@3.0.1/dist/stimulus.js";

      window.Stimulus = Application.start();

      Stimulus.register("upload", class UploadController extends Controller {
        static targets = ["uploadTable", "fileInput"];

        static FILE_NAME = 0;
        static FILE_PROGRESS = 1;

        csrfToken = null;
        fileNames = {};

        connect() {
          this.csrfToken = document.querySelector('meta[name="csrf_token"]').content;
        }

        handleFileUploadSuccess(event) {
          var xhr = event.target;
          var fileName = xhr["fileName"];

          var response = xhr.response;
          var progressBar = document.getElementById(`progress-bar-${fileName}`);
          var progressCell = document.getElementById(`progress-cell-${fileName}`);
          var hyperlink = document.createElement("a");
          var linktext = document.createTextNode(response);
          hyperlink.appendChild(linktext);
          hyperlink.href = response;
          progressCell.innerHTML = hyperlink.outerHTML;
        }

        handleFileUploadProgress(event) {
          var xhr = event.target;
          var fileName = xhr["fileName"];
          var progressBar = document.getElementById(`progress-bar-${fileName}`);

          if (event.lengthComputable === false)
            return;

          var progressPercent = Math.floor((event.loaded / event.total) * 100);
          progressBar.setAttribute("value", progressPercent.toString());
        }

        uploadFile(file, fileName) {
          // TIL fetch doesnt handle ProgressEvents :((((((
          let request = new XMLHttpRequest();
          request.open("POST", "/upload");
          request.setRequestHeader("x-csrf-token", this.csrfToken);
          request.addEventListener("load", this.handleFileUploadSuccess);
          request.upload.onprogress = this.handleFileUploadProgress;
          request["fileName"] = fileName;
          request.upload["fileName"] = fileName;

          var formData = new FormData();
          formData.append("file", file);
          request.send(formData);
        }

        handleUpload(event) {
          var files = this.fileInputTarget.files;

          // TIL FileList doesn't use Array.prototype....
          [...files].forEach((file) => {
            var progress = document.createElement("progress");
            var tableRow = this.uploadTableTarget.insertRow();

            var fileNameCell = tableRow.insertCell(this.FILE_NAME);
            var progressCell = tableRow.insertCell(this.FILE_PROGRESS);

            // set up progress element with some stuff
            progress.setAttribute("max", "100");
            progress.setAttribute("value", "0");
            progress.classList.add("progress");
            progress.classList.add("is-primary");

            // make sure to handle duplicate table names
            // (todo: is this why we see the bug of two files with the same
            // name not working?)
            var fileName = file.name;
            var existingTableRow = Array.from(document.querySelectorAll("tr")).find(tableRow => {
              var currentFileName = tableRow.cells[0].innerText;
              return (fileName === currentFileName)
            });

            if(existingTableRow !== undefined) {
              this.fileNames[fileName]++
              fileName = `${fileName} (${this.fileNames[fileName] + 1})`
            } else {
              this.fileNames[fileName] = 0
            }

            progress.id = `progress-bar-${fileName}`;
            progressCell.id = `progress-cell-${fileName}`;
            fileNameCell.innerText = fileName;
            progressCell.innerHTML = progress.outerHTML;

            this.uploadFile(file, fileName);
          });
        }
      });
    </script>
  </head>
  <body>
    <section class="section">
      <div class="container">
        <h1 class="title">
          frampt
        </h1>
        <div data-controller="upload">
          <div class="file">
            <label class="file-label">
              <input
              class="file-input"
              type="file"
              name="file"
              multiple
              data-action="change->upload#handleUpload"
              data-upload-target="fileInput"
            >
              <span class="file-cta">
                <span class="file-label">
                  Give Frampt titanite
                </span>
              </span>
            </label>
          </div>
          <div class="content">
            <table data-upload-target="uploadTable">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Progress</th>
                </tr>
              </thead>
              <tbody>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </section>
  </body>
</html>
